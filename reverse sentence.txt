int n = s.Length;
            char[] separtor = new char[] {'.', ',', ':', ';', '=', '(', '&', '[', ']', '\'', '/', '!', '?', ')' };
           

            Stack<int> pos        = new Stack<int>();
            Stack<string> words   = new Stack<string>();
            Stack<string> symbols = new Stack<string>();
            int i = 0; 

            while ( i < n)
            {
                List<char> word = new List<char>();

                while (i < n && !separtor.Contains(s[i]) &&  s[i].ToString() != " ") {
                    word.Append(s[i]);
                    i += 1;
                }

                Console.WriteLine(String.Join("", word));
                if (word.Count() > 0)
                {
                    words.Push(String.Join("", word));
                }


                StringBuilder symbol = new StringBuilder();
                bool flag = false;

                while (separtor.Contains(s[i]))
                {
                    symbol.Append(s[i]);
                    i += 1;
                    flag = true;
                }
                if (flag) {
                    symbols.Push(symbol.ToString());
                    pos.Push(words.Count());
                        }
            }

            List<string> res = new List<string>();
            int insert = pos.Pop();
            for ( int i = 0; i < words.Count(); i++)
            {

              
              if (i == insert)
                {   
                    string combo = new string (words.Pop().Concat(symbols.Pop()));
                    res.Add(combo);
                    insert = pos.Pop();
                    
                } else
                {
                    res.Add(combo)
                }
            }
            return String.Join(" ", res);
        }



System.Runtime